
Drivers_Hussein.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000a28  08000a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a44  08000a44  00010a4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a44  08000a44  00010a4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a44  08000a4c  00010a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a44  08000a44  00010a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a48  08000a48  00010a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a4c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a4c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000337e  00000000  00000000  00010a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000083e  00000000  00000000  00013df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009a0  00000000  00000000  00014631  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  00014fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00015178  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000011e1  00000000  00000000  000152d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bde  00000000  00000000  000164b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a4a0  00000000  00000000  0001808f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002252f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000524  00000000  00000000  000225ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a10 	.word	0x08000a10

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a10 	.word	0x08000a10

08000170 <delay_ms>:
 */

#include "lcd.h"


void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_init+0x154>)
 80001c4:	f000 fa60 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_init+0x154>)
 80001e0:	f000 fa52 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_init+0x154>)
 80001fc:	f000 fa44 	bl	8000688 <MCAL_GPIO_INIT>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_init+0x154>)
 8000216:	f000 fa37 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_init+0x154>)
 8000230:	f000 fa2a 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_init+0x154>)
 800024a:	f000 fa1d 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_init+0x154>)
 8000264:	f000 fa10 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_init+0x154>)
 800027e:	f000 fa03 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_init+0x154>)
 8000298:	f000 f9f6 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_init+0x154>)
 80002b2:	f000 f9e9 	bl	8000688 <MCAL_GPIO_INIT>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_output_push_pull;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_SPEED_OUT = GPIO_SPEED_10MHZ;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinCfg);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_init+0x154>)
 80002cc:	f000 f9dc 	bl	8000688 <MCAL_GPIO_INIT>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_init+0x154>)
 80002d8:	f000 fa46 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_init+0x154>)
 80002e4:	f000 fa40 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_init+0x154>)
 80002f0:	f000 fa3a 	bl	8000768 <MCAL_GPIO_WRITE_PIN>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000020 	.word	0x20000020
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 f857 	bl	80003b8 <LCD_WRITE_COMMAND>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <LCD_lcd_kick+0x28>)
 800031c:	f000 fa24 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	delay_ms(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f7ff ff25 	bl	8000170 <delay_ms>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <LCD_lcd_kick+0x28>)
 800032e:	f000 fa1b 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	460a      	mov	r2, r1
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	4613      	mov	r3, r2
 800034a:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d108      	bne.n	8000364 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d805      	bhi.n	8000364 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b80      	subs	r3, #128	; 0x80
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f82a 	bl	80003b8 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d108      	bne.n	800037c <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d805      	bhi.n	800037c <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	3b40      	subs	r3, #64	; 0x40
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f81e 	bl	80003b8 <LCD_WRITE_COMMAND>
		}
	}
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_INIT>:

void LCD_INIT() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000388:	2014      	movs	r0, #20
 800038a:	f7ff fef1 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800038e:	f7ff ff0b 	bl	80001a8 <LCD_GPIO_init>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff feec 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 8000398:	f7ff ffb2 	bl	8000300 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800039c:	2038      	movs	r0, #56	; 0x38
 800039e:	f000 f80b 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003a2:	2006      	movs	r0, #6
 80003a4:	f000 f808 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	f000 f805 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003ae:	200f      	movs	r0, #15
 80003b0:	f000 f802 	bl	80003b8 <LCD_WRITE_COMMAND>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WRITE_PORT(LCD_CTRL, command);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003ca:	f000 f9e4 	bl	8000796 <MCAL_GPIO_WRITE_PORT>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003d6:	f000 f9c7 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003e2:	f000 f9c1 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff fec2 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003ec:	f7ff ff90 	bl	8000310 <LCD_lcd_kick>

}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	//	LCD_CTRL->CRL = character;
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITE_PORT(LCD_CTRL, character);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	b29b      	uxth	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_WRITE_CHAR+0x40>)
 800040e:	f000 f9c2 	bl	8000796 <MCAL_GPIO_WRITE_PORT>
	//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <LCD_WRITE_CHAR+0x40>)
 800041a:	f000 f9a5 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_WRITE_CHAR+0x40>)
 8000426:	f000 f99f 	bl	8000768 <MCAL_GPIO_WRITE_PIN>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff fea0 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000430:	f7ff ff6e 	bl	8000310 <LCD_lcd_kick>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800044c:	e01c      	b.n	8000488 <LCD_WRITE_STRING+0x48>
		count++;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffcd 	bl	80003fc <LCD_WRITE_CHAR>
		if (count == 16) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b10      	cmp	r3, #16
 8000466:	d104      	bne.n	8000472 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000468:	2100      	movs	r1, #0
 800046a:	2002      	movs	r0, #2
 800046c:	f7ff ff66 	bl	800033c <LCD_GOTO_XY>
 8000470:	e00a      	b.n	8000488 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b20      	cmp	r3, #32
 8000476:	d107      	bne.n	8000488 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000478:	f7ff ff42 	bl	8000300 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff5c 	bl	800033c <LCD_GOTO_XY>
			count = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1de      	bne.n	800044e <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <EXTI9_CallBack>:
unsigned int flag =0;



void EXTI9_CallBack()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	flag=1;
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <EXTI9_CallBack+0x1c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ IS HAPPENED");
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <EXTI9_CallBack+0x20>)
 80004a4:	f7ff ffcc 	bl	8000440 <LCD_WRITE_STRING>
	wait_ms(1000);
 80004a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ac:	f000 f806 	bl	80004bc <wait_ms>


}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000001c 	.word	0x2000001c
 80004b8:	08000a28 	.word	0x08000a28

080004bc <wait_ms>:


void wait_ms(uint32_t time)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++){
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e00b      	b.n	80004e2 <wait_ms+0x26>

		for(j=0;j<255;j++);
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	e002      	b.n	80004d6 <wait_ms+0x1a>
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	2bfe      	cmp	r3, #254	; 0xfe
 80004da:	d9f9      	bls.n	80004d0 <wait_ms+0x14>
	for(i=0;i<time;i++){
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3301      	adds	r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d3ef      	bcc.n	80004ca <wait_ms+0xe>
	}


}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <main>:

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <main+0x6c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <main+0x6c>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <main+0x6c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a15      	ldr	r2, [pc, #84]	; (8000560 <main+0x6c>)
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0x6c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <main+0x6c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 800051e:	f7ff ff31 	bl	8000384 <LCD_INIT>
	LCD_clear_screen();
 8000522:	f7ff feed 	bl	8000300 <LCD_clear_screen>


	EXTI_PinConf_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN =EXTI9PB9;
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <main+0x70>)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	ca07      	ldmia	r2, {r0, r1, r2}
 800052c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 8000530:	2300      	movs	r3, #0
 8000532:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.p_TRQ_CALLBACK =EXTI9_CallBack;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0x74>)
 8000536:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN  =EXTI_TRQ_ENABLE;
 8000538:	2301      	movs	r3, #1
 800053a:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_INIT(&EXTI_CFG);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f937 	bl	80007b2 <MCAL_EXTI_GPIO_INIT>
	flag =1;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <main+0x78>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]



	while (1)
	{
		if(flag)
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <main+0x78>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0fb      	beq.n	800054a <main+0x56>
		{
			LCD_clear_screen();
 8000552:	f7ff fed5 	bl	8000300 <LCD_clear_screen>
			flag=0;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <main+0x78>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
		if(flag)
 800055c:	e7f5      	b.n	800054a <main+0x56>
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	08000a38 	.word	0x08000a38
 8000568:	08000499 	.word	0x08000499
 800056c:	2000001c 	.word	0x2000001c

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000574:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f000 fa13 	bl	80009c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff ffa7 	bl	80004f4 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005b4:	08000a4c 	.word	0x08000a4c
  ldr r2, =_sbss
 80005b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005bc:	20000060 	.word	0x20000060

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>

080005c2 <GET_CRLH_Position>:

#include <Stm32_f103_c6_GPIO_Driver.h>


uint8_t GET_CRLH_Position (uint16_t PinNumber)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	80fb      	strh	r3, [r7, #6]

	if (PinNumber == GPIO_PIN_0)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d101      	bne.n	80005d6 <GET_CRLH_Position+0x14>
	{
		return 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e053      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_1)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d101      	bne.n	80005e0 <GET_CRLH_Position+0x1e>
	{
		return 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	e04e      	b.n	800067e <GET_CRLH_Position+0xbc>

	}
	if (PinNumber == GPIO_PIN_2)
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d101      	bne.n	80005ea <GET_CRLH_Position+0x28>
	{

		return 8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	e049      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_3)
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d101      	bne.n	80005f4 <GET_CRLH_Position+0x32>
	{
		return 12;
 80005f0:	230c      	movs	r3, #12
 80005f2:	e044      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_4)
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	2b10      	cmp	r3, #16
 80005f8:	d101      	bne.n	80005fe <GET_CRLH_Position+0x3c>
	{
		return 16;
 80005fa:	2310      	movs	r3, #16
 80005fc:	e03f      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_5)
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	2b20      	cmp	r3, #32
 8000602:	d101      	bne.n	8000608 <GET_CRLH_Position+0x46>
	{
		return 20;
 8000604:	2314      	movs	r3, #20
 8000606:	e03a      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_6)
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	2b40      	cmp	r3, #64	; 0x40
 800060c:	d101      	bne.n	8000612 <GET_CRLH_Position+0x50>
	{
		return 24;
 800060e:	2318      	movs	r3, #24
 8000610:	e035      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_7)
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	2b80      	cmp	r3, #128	; 0x80
 8000616:	d101      	bne.n	800061c <GET_CRLH_Position+0x5a>
	{
		return 28;
 8000618:	231c      	movs	r3, #28
 800061a:	e030      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_8)
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000622:	d101      	bne.n	8000628 <GET_CRLH_Position+0x66>
	{
		return 0;
 8000624:	2300      	movs	r3, #0
 8000626:	e02a      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_9)
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800062e:	d101      	bne.n	8000634 <GET_CRLH_Position+0x72>
	{
		return 4;
 8000630:	2304      	movs	r3, #4
 8000632:	e024      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_10)
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800063a:	d101      	bne.n	8000640 <GET_CRLH_Position+0x7e>
	{
		return 8;
 800063c:	2308      	movs	r3, #8
 800063e:	e01e      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_11)
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000646:	d101      	bne.n	800064c <GET_CRLH_Position+0x8a>
	{
		return 12;
 8000648:	230c      	movs	r3, #12
 800064a:	e018      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_12)
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000652:	d101      	bne.n	8000658 <GET_CRLH_Position+0x96>
	{
		return 16;
 8000654:	2310      	movs	r3, #16
 8000656:	e012      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_13)
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065e:	d101      	bne.n	8000664 <GET_CRLH_Position+0xa2>
	{
		return 20;
 8000660:	2314      	movs	r3, #20
 8000662:	e00c      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_14)
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800066a:	d101      	bne.n	8000670 <GET_CRLH_Position+0xae>
	{
		return 24;
 800066c:	2318      	movs	r3, #24
 800066e:	e006      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	if (PinNumber == GPIO_PIN_15)
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000676:	d101      	bne.n	800067c <GET_CRLH_Position+0xba>
	{
		return 28;
 8000678:	231c      	movs	r3, #28
 800067a:	e000      	b.n	800067e <GET_CRLH_Position+0xbc>
	}
	return 0;
 800067c:	2300      	movs	r3, #0


}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <MCAL_GPIO_INIT>:

//}

// SET GPIO PIN
void MCAL_GPIO_INIT(GPIO_Type_Def* GPIOX,GPIO_PinConfig_t* pin_config)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	//PIN confi. low from  0---->7
	//PIN confi. high from 8---->15

	volatile uint32_t* configregerster =NULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config =0;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]
	configregerster = (pin_config->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOX->CRL : &GPIOX->CRH;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d801      	bhi.n	80006a6 <MCAL_GPIO_INIT+0x1e>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	e001      	b.n	80006aa <MCAL_GPIO_INIT+0x22>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3304      	adds	r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]


	if( (pin_config->GPIO_Mode == GPIO_MODE_output_Open_drain)||(pin_config->GPIO_Mode == GPIO_MODE_output_push_pull)||(pin_config->GPIO_Mode == GPIO_MODE_AF_output_Open_drain)||(pin_config->GPIO_Mode == GPIO_MODE_AF_output_push_pull))
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b05      	cmp	r3, #5
 80006b2:	d00b      	beq.n	80006cc <MCAL_GPIO_INIT+0x44>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d007      	beq.n	80006cc <MCAL_GPIO_INIT+0x44>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b07      	cmp	r3, #7
 80006c2:	d003      	beq.n	80006cc <MCAL_GPIO_INIT+0x44>
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2b06      	cmp	r3, #6
 80006ca:	d10e      	bne.n	80006ea <MCAL_GPIO_INIT+0x62>
	{

		PIN_config = ((((pin_config->GPIO_Mode -4) <<2 ) | (pin_config->GPIO_SPEED_OUT)) & 0X0f);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	3b04      	subs	r3, #4
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e02c      	b.n	8000744 <MCAL_GPIO_INIT+0xbc>

	}
	else
	{
		if((pin_config->GPIO_Mode == GPIO_MODE_INPUT_FLO)||pin_config->GPIO_Mode == GPIO_MODE_Analog)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	789b      	ldrb	r3, [r3, #2]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d003      	beq.n	80006fa <MCAL_GPIO_INIT+0x72>
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	789b      	ldrb	r3, [r3, #2]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d107      	bne.n	800070a <MCAL_GPIO_INIT+0x82>
		{
			PIN_config = ((((pin_config->GPIO_Mode)<<2)| 0x0)&0x0f);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e01c      	b.n	8000744 <MCAL_GPIO_INIT+0xbc>





		}else if (pin_config->GPIO_Mode == GPIO_MODE_AF_INPUT)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b08      	cmp	r3, #8
 8000710:	d102      	bne.n	8000718 <MCAL_GPIO_INIT+0x90>
		{
			PIN_config = ((((GPIO_MODE_INPUT_FLO)<<2)| 0x0)&0x0f);
 8000712:	2304      	movs	r3, #4
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e015      	b.n	8000744 <MCAL_GPIO_INIT+0xbc>


		}else
		{
			PIN_config = ((((GPIO_MODE_INPUT_PULL_UP)<<2)| 0x0)&0x0f);
 8000718:	2308      	movs	r3, #8
 800071a:	73fb      	strb	r3, [r7, #15]
			if (pin_config->GPIO_Mode == GPIO_MODE_INPUT_PULL_UP){
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d107      	bne.n	8000734 <MCAL_GPIO_INIT+0xac>
				GPIOX->ODR |= pin_config->GPIO_PinNumber;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	e007      	b.n	8000744 <MCAL_GPIO_INIT+0xbc>
			else
			{



				GPIOX->ODR &= ~(pin_config->GPIO_PinNumber);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	8812      	ldrh	r2, [r2, #0]
 800073c:	43d2      	mvns	r2, r2
 800073e:	401a      	ands	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60da      	str	r2, [r3, #12]




	}
	(*configregerster) |= ((PIN_config) << GET_CRLH_Position(pin_config->GPIO_PinNumber));
 8000744:	7bfc      	ldrb	r4, [r7, #15]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff39 	bl	80005c2 <GET_CRLH_Position>
 8000750:	4603      	mov	r3, r0
 8000752:	fa04 f203 	lsl.w	r2, r4, r3
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	431a      	orrs	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	601a      	str	r2, [r3, #0]


}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bd90      	pop	{r4, r7, pc}

08000768 <MCAL_GPIO_WRITE_PIN>:
	return port_value;

}

void MCAL_GPIO_WRITE_PIN(GPIO_Type_Def* GPIOX,uint16_t PinNumber,uint8_t value)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	807b      	strh	r3, [r7, #2]
 8000774:	4613      	mov	r3, r2
 8000776:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8000778:	787b      	ldrb	r3, [r7, #1]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <MCAL_GPIO_WRITE_PIN+0x1e>
	{
		GPIOX->BSRR = (uint32_t)PinNumber;
 800077e:	887a      	ldrh	r2, [r7, #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	611a      	str	r2, [r3, #16]
	{
		GPIOX->BRR = (uint32_t) PinNumber;

	}

}
 8000784:	e002      	b.n	800078c <MCAL_GPIO_WRITE_PIN+0x24>
		GPIOX->BRR = (uint32_t) PinNumber;
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	615a      	str	r2, [r3, #20]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <MCAL_GPIO_WRITE_PORT>:

void MCAL_GPIO_WRITE_PORT(GPIO_Type_Def* GPIOX,uint16_t value)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	807b      	strh	r3, [r7, #2]

	GPIOX->ODR =(uint32_t)value;
 80007a2:	887a      	ldrh	r2, [r7, #2]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60da      	str	r2, [r3, #12]

}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <MCAL_EXTI_GPIO_INIT>:

}


void MCAL_EXTI_GPIO_INIT (EXTI_PinConf_t* EXTI_Config)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]

}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <EXTI0_IRQHandler>:
}
//================================================================//
//ISR Functions

void EXTI0_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	//clear pending register by set bit by 1
	EXTI->PR |= 1<<0;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <EXTI0_IRQHandler+0x1c>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <EXTI0_IRQHandler+0x1c>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[0]();
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <EXTI0_IRQHandler+0x20>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4798      	blx	r3

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010400 	.word	0x40010400
 80007e4:	20000024 	.word	0x20000024

080007e8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <EXTI1_IRQHandler+0x1c>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <EXTI1_IRQHandler+0x1c>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[1]();
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <EXTI1_IRQHandler+0x20>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	4798      	blx	r3


}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40010400 	.word	0x40010400
 8000808:	20000024 	.word	0x20000024

0800080c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI2_IRQHandler+0x1c>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EXTI2_IRQHandler+0x1c>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[2]();
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <EXTI2_IRQHandler+0x20>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	4798      	blx	r3

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010400 	.word	0x40010400
 800082c:	20000024 	.word	0x20000024

08000830 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI3_IRQHandler+0x1c>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <EXTI3_IRQHandler+0x1c>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[3]();
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI3_IRQHandler+0x20>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4798      	blx	r3

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010400 	.word	0x40010400
 8000850:	20000024 	.word	0x20000024

08000854 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <EXTI4_IRQHandler+0x1c>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <EXTI4_IRQHandler+0x1c>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6153      	str	r3, [r2, #20]

	GP_CALLBACK[4]();
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <EXTI4_IRQHandler+0x20>)
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	4798      	blx	r3

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010400 	.word	0x40010400
 8000874:	20000024 	.word	0x20000024

08000878 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<5;GP_CALLBACK[5]();}
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	2b00      	cmp	r3, #0
 8000886:	d008      	beq.n	800089a <EXTI9_5_IRQHandler+0x22>
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	4a22      	ldr	r2, [pc, #136]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6153      	str	r3, [r2, #20]
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <EXTI9_5_IRQHandler+0xa4>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<6;GP_CALLBACK[6]();}
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f003 0320 	and.w	r3, r3, #32
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d008      	beq.n	80008b8 <EXTI9_5_IRQHandler+0x40>
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <EXTI9_5_IRQHandler+0xa4>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<7;GP_CALLBACK[7]();}
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	f003 0320 	and.w	r3, r3, #32
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d008      	beq.n	80008d6 <EXTI9_5_IRQHandler+0x5e>
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ce:	6153      	str	r3, [r2, #20]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <EXTI9_5_IRQHandler+0xa4>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<8;GP_CALLBACK[8]();}
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d008      	beq.n	80008f4 <EXTI9_5_IRQHandler+0x7c>
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <EXTI9_5_IRQHandler+0xa4>)
 80008f0:	6a1b      	ldr	r3, [r3, #32]
 80008f2:	4798      	blx	r3
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<9;GP_CALLBACK[9]();}
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <EXTI9_5_IRQHandler+0x9a>
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <EXTI9_5_IRQHandler+0xa0>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6153      	str	r3, [r2, #20]
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <EXTI9_5_IRQHandler+0xa4>)
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	4798      	blx	r3


}void EXTI15_10_IRQHandler(void)
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40010400 	.word	0x40010400
 800091c:	20000024 	.word	0x20000024

08000920 <EXTI15_10_IRQHandler>:
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){EXTI->PR |= 1<<10;GP_CALLBACK[10]();}
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <EXTI15_10_IRQHandler+0x22>
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6153      	str	r3, [r2, #20]
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <EXTI15_10_IRQHandler+0xa4>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000940:	4798      	blx	r3
	if(EXTI->PR & 1<<11){EXTI->PR |= 1<<11;GP_CALLBACK[11]();}
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800094a:	2b00      	cmp	r3, #0
 800094c:	d008      	beq.n	8000960 <EXTI15_10_IRQHandler+0x40>
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <EXTI15_10_IRQHandler+0xa4>)
 800095c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095e:	4798      	blx	r3
	if(EXTI->PR & 1<<12){EXTI->PR |= 1<<12;GP_CALLBACK[12]();}
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d008      	beq.n	800097e <EXTI15_10_IRQHandler+0x5e>
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000972:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000976:	6153      	str	r3, [r2, #20]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <EXTI15_10_IRQHandler+0xa4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4798      	blx	r3
	if(EXTI->PR & 1<<13){EXTI->PR |= 1<<13;GP_CALLBACK[13]();}
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d008      	beq.n	800099c <EXTI15_10_IRQHandler+0x7c>
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 8000990:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <EXTI15_10_IRQHandler+0xa4>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099a:	4798      	blx	r3
	if(EXTI->PR & 1<<14){EXTI->PR |= 1<<14;GP_CALLBACK[14]();}
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d008      	beq.n	80009ba <EXTI15_10_IRQHandler+0x9a>
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <EXTI15_10_IRQHandler+0xa0>)
 80009ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b2:	6153      	str	r3, [r2, #20]
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <EXTI15_10_IRQHandler+0xa4>)
 80009b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b8:	4798      	blx	r3


}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010400 	.word	0x40010400
 80009c4:	20000024 	.word	0x20000024

080009c8 <__libc_init_array>:
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	2500      	movs	r5, #0
 80009cc:	4e0c      	ldr	r6, [pc, #48]	; (8000a00 <__libc_init_array+0x38>)
 80009ce:	4c0d      	ldr	r4, [pc, #52]	; (8000a04 <__libc_init_array+0x3c>)
 80009d0:	1ba4      	subs	r4, r4, r6
 80009d2:	10a4      	asrs	r4, r4, #2
 80009d4:	42a5      	cmp	r5, r4
 80009d6:	d109      	bne.n	80009ec <__libc_init_array+0x24>
 80009d8:	f000 f81a 	bl	8000a10 <_init>
 80009dc:	2500      	movs	r5, #0
 80009de:	4e0a      	ldr	r6, [pc, #40]	; (8000a08 <__libc_init_array+0x40>)
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <__libc_init_array+0x44>)
 80009e2:	1ba4      	subs	r4, r4, r6
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	42a5      	cmp	r5, r4
 80009e8:	d105      	bne.n	80009f6 <__libc_init_array+0x2e>
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009f0:	4798      	blx	r3
 80009f2:	3501      	adds	r5, #1
 80009f4:	e7ee      	b.n	80009d4 <__libc_init_array+0xc>
 80009f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009fa:	4798      	blx	r3
 80009fc:	3501      	adds	r5, #1
 80009fe:	e7f2      	b.n	80009e6 <__libc_init_array+0x1e>
 8000a00:	08000a44 	.word	0x08000a44
 8000a04:	08000a44 	.word	0x08000a44
 8000a08:	08000a44 	.word	0x08000a44
 8000a0c:	08000a48 	.word	0x08000a48

08000a10 <_init>:
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a12:	bf00      	nop
 8000a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a16:	bc08      	pop	{r3}
 8000a18:	469e      	mov	lr, r3
 8000a1a:	4770      	bx	lr

08000a1c <_fini>:
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1e:	bf00      	nop
 8000a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a22:	bc08      	pop	{r3}
 8000a24:	469e      	mov	lr, r3
 8000a26:	4770      	bx	lr
